//// AutoRepeatButton.cpp : implementation file
////
//
#include "stdafx.h"
#include "AutoRepeatButton.h"

#define TIMERID 0x0FEB

IMPLEMENT_DYNAMIC(CAutoRepeatButton, CButtonEx)

CAutoRepeatButton::CAutoRepeatButton()
    : TimerActive (false)   // true when interval timer is running
    , MessageSent (false)   // true after the BN_CLICK message has been sent once
    , KeyPress    (false)   // true if the button press generated by the space bar
    , MousePress  (false)   // true if the buttun press generated by the left mouse button
    , Parent      (NULL )   // pointer the the button's parent window
    , InitialTime (200  )   // time delay in milliseconds between button press and first BN_CLICK message
    , RepeatTime  (20  )   // time delay in milliseconds between repeating BN_CLICK messages
{
}

CAutoRepeatButton::~CAutoRepeatButton()
{
}

BEGIN_MESSAGE_MAP(CAutoRepeatButton, CButtonEx)
    ON_WM_KEYDOWN()
    ON_WM_KEYUP()
    ON_WM_LBUTTONDOWN()
    ON_WM_LBUTTONUP()
    ON_WM_LBUTTONDBLCLK()
    ON_WM_TIMER()
END_MESSAGE_MAP()

// CAutoRepeatButton message handlers

void CAutoRepeatButton::OnKeyDown(UINT nChar, UINT nRepCnt, UINT nFlags)
{
    if (!MousePress)    // Only if not already activated by the mouse
    {
        if (VK_SPACE == nChar && !TimerActive)
        {
            SetTimer(TIMERID, InitialTime, NULL);
            TimerActive = true;
            KeyPress = true;
        }

        CButtonEx::OnKeyDown(nChar, nRepCnt, nFlags);
    }
}

void CAutoRepeatButton::OnLButtonDown(UINT nFlags, CPoint point)
{
    if (!KeyPress)  // Only if not already activated with the space bar
    {
        if (!TimerActive)
        {
            SetTimer(TIMERID, InitialTime, NULL);
            TimerActive = true;
            MousePress = true;
        }

        CButtonEx::OnLButtonDown(nFlags, point);
    }
}

void CAutoRepeatButton::OnKeyUp(UINT nChar, UINT nRepCnt, UINT nFlags)
{
    if (VK_SPACE == nChar && KeyPress)
    {
        KillTimer(TIMERID);
        if (MessageSent)
        {
            ReleaseCapture();   // CButton::OnKeyDown captures the mouse
            SetState(0);        // Redraw button as not pushed
        }
        else
        {
            CButtonEx::OnKeyUp(nChar, nRepCnt, nFlags);
        }
        TimerActive = false;
        KeyPress = false;
        MessageSent = false;
    }
}

void CAutoRepeatButton::OnLButtonUp(UINT nFlags, CPoint point)
{
    if (MousePress)
    {
        KillTimer(TIMERID);
        if (MessageSent)
        {
            ReleaseCapture();
            SetState(0);
        }
        else
        {
            CButtonEx::OnLButtonUp(nFlags, point);
        }
        TimerActive = false;
        MousePress = false;
        MessageSent = false;
    }
}

void CAutoRepeatButton::OnLButtonDblClk(UINT nFlags, CPoint point)
{
    OnLButtonDown(nFlags, point);
}

void CAutoRepeatButton::OnTimer(UINT_PTR nIDEvent)
{
    if (nIDEvent == TIMERID)
    {
        if (BST_PUSHED == (BST_PUSHED & GetState()))
        {
            if (!MessageSent)
            {
                SetTimer(TIMERID, RepeatTime, NULL);
                MessageSent = true;
            }
            Parent->SendMessage(WM_COMMAND, MAKELPARAM(GetDlgCtrlID(), BN_CLICKED), (WPARAM)m_hWnd);
        }
    }
    else
    {
        CButtonEx::OnTimer(nIDEvent);
    }
}

void CAutoRepeatButton::PreSubclassWindow()
{
    Parent = GetParent();
    ASSERT(IsWindow(*Parent));
    CButtonEx::PreSubclassWindow();
}

void CAutoRepeatButton::SetTimes(UINT Initial, UINT Repeat)
{
    InitialTime = Initial;
    RepeatTime = Repeat;
}
